
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "thunderbolt" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/7662605a-69e6-4e29-be80-7994a58360ec";
      fsType = "btrfs";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp8s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  hardware.graphics.enable = true;
  hardware.graphics.extraPackages = with pkgs; [ opencl-headers ];
  hardware.nvidia = {
    open = true;
  };
#  hardware.nvidia = { 
#      package = config.boot.kernelPackages.nvidiaPackages.stable;
#      modesetting.enable = true;
#      
#      powerManagement = {
#          enable = true;
#          finegrained = true;
#      };
#      prime = {
#          offload = {
#              enable = true;
#              enableOffloadCmd = true;
#          };
#          nvidiaBusId = "PCI:01:00:0";
#          amdgpuBusId = "PCI:74:00:0";
#      };
#  };
  services.xserver.videoDrivers = [ "nvidia" ];


  environment.systemPackages = [ 
      pkgs.virt-manager 
      pkgs.libvirt 
      pkgs.qemu 
      pkgs.kmod 
      ];
  # kvm
  virtualisation.libvirtd.enable = true;
  boot.kernelParams = [ 
      #passthrough
      "amd_iommu=on" # todo try =pt if =on works
      "iommu=on" 
  ];
  users.users.${config.my.user}.extraGroups = [ "libvirtd" "qemu-libvirtd" ];
}
