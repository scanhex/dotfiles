diff --git home-manager/home.nix home-manager/home.nix
index 986cc96..f035bd0 100644
--- home-manager/home.nix
+++ home-manager/home.nix
@@ -3,42 +3,59 @@
 let nix-user-chroot-patch = pkgs.callPackage ../nix-user-chroot-patch {};
 in 
 {
-	imports = [
-		./git.nix
-		./neovim
-        ./shells
-	];
+  imports = [
+    ./git.nix
+    ./neovim
+    ./shells
+  ];
 
-	home.packages = [
-      pkgs.bash
-  	  pkgs.tmux 
-	  pkgs.rustc
-	  pkgs.nix
-	  pkgs.cargo
-	  pkgs.glibc
+  nixpkgs.overlays = [ (final: prev: 
+      { 
+      bash-completion = prev.bash-completion.overrideAttrs (old:  
+          {
+            src = builtins.fetchurl {
+              url = "https://github.com/scop/bash-completion/releases/download/2.11/bash-completion-2.11.tar.xz";
+              sha256 = "1b0iz7da1sgifx1a5wdyx1kxbzys53v0kyk8nhxfipllmm5qka3k";
+            };
+          });
+      delta = prev.delta.overrideAttrs (old: 
+        {
+          postInstall = "";
+        });
+      })];
+
+
+  home.packages = [
+    pkgs.bash
+      pkgs.tmux 
+      pkgs.rustc
+      pkgs.nix
+      pkgs.cargo
+      pkgs.glibc
       pkgs.clang-tools_17
       pkgs.gdb
       pkgs.valgrind
       pkgs.nushell
       pkgs.bat
       pkgs.parquet-tools
-	  nix-user-chroot-patch
-	];
+      pkgs.stgit
+      nix-user-chroot-patch
+  ];
 
-    programs.fzf.enable = true;
-    xdg.enable = true;
-    nix = { 
-        enable = true;
-        settings = {
-            use-xdg-base-directories = true;
-            experimental-features = [ "nix-command" "flakes" ];
-        };
+  programs.fzf.enable = true;
+  xdg.enable = true;
+  nix = { 
+    enable = true;
+    settings = {
+      use-xdg-base-directories = true;
+      experimental-features = [ "nix-command" "flakes" ];
     };
+  };
 
-	home.shellAliases = {
-		python3 = "LD_PRELOAD=${nix-user-chroot-patch}/lib/nix-user-chroot-patch.so python3";
-		g = "LD_PRELOAD=${nix-user-chroot-patch}/lib/nix-user-chroot-patch.so git";
-	};
+  home.shellAliases = {
+    python3 = "LD_PRELOAD=${nix-user-chroot-patch}/lib/nix-user-chroot-patch.so python3";
+    g = "LD_PRELOAD=${nix-user-chroot-patch}/lib/nix-user-chroot-patch.so git";
+  };
 
-    home.stateVersion = "23.11"; # Shouldn't need to change this most of the time
+  home.stateVersion = "23.11"; # Shouldn't need to change this most of the time
 }
diff --git home-manager/neovim/my-init-lua/default.nix home-manager/neovim/my-init-lua/default.nix
index 22ba63f..e9ecfb1 100644
--- home-manager/neovim/my-init-lua/default.nix
+++ home-manager/neovim/my-init-lua/default.nix
@@ -15,6 +15,7 @@ let
         nvim-notify
 		nvim-treesitter.withAllGrammars
 		nvim-treesitter-textobjects
+		nvim-treesitter-context
         plenary-nvim
 		telescope-fzf-native-nvim
 		telescope-nvim
@@ -32,7 +33,11 @@ let
         diffview-nvim
         lazygit-nvim
         nvim-surround
-        #cmake-tools-nvim - add when it's out of unstable
+        zen-mode-nvim
+        rustaceanvim
+        refactoring-nvim
+        #trouble-nvim -- had some breaking changes post 24.05 release
+        #cmake-tools-nvim -- broken in nixpkgs 24.05, super laggy
 		];
 mkEntryFromDrv = drv:
             if lib.isDerivation drv then
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/cmake-tools.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/cmake-tools.lua
index 8001035..b45d30d 100644
--- home-manager/neovim/my-init-lua/init.lua/after/plugin/cmake-tools.lua
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/cmake-tools.lua
@@ -35,7 +35,7 @@ return {
         require("cmake-tools").setup {
             cmake_command = "cmake",                                          -- this is used to specify cmake command path
             ctest_command = "ctest",                                          -- this is used to specify ctest command path
-            cmake_regenerate_on_save = false,                                  -- auto generate when save CMakeLists.txt
+            cmake_regenerate_on_save = false,                                 -- auto generate when save CMakeLists.txt
             cmake_generate_options = { "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" }, -- this will be passed when invoke `CMakeGenerate`
             cmake_build_options = { "--parallel 24" },                        -- this will be passed when invoke `CMakeBuild`
             -- support macro expansion:
@@ -132,7 +132,13 @@ return {
                                 auto_scroll = false,
                                 start_in_insert = false,
                                 enter = false,
-                                quit_on_exit = "success"
+                                quit_on_exit = "success",
+                                on_create = function()
+                                    assert(vim.bo.buftype == 'terminal', "Toggleterm should be a terminal buffer")
+                                    if vim.bo.buftype == 'terminal' then
+                                        vim.api.nvim_command('stopinsert')
+                                    end
+                                end
                             }
                         },   -- options to pass into the `overseer.new_task` command
                         on_new_task = function(task)
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/codegpt.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/codegpt.lua
new file mode 100644
index 0000000..457e8c3
--- /dev/null
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/codegpt.lua
@@ -0,0 +1,21 @@
+return {
+    "dpayne/CodeGPT.nvim",
+    dependencies = {
+        'nvim-lua/plenary.nvim',
+        'MunifTanjim/nui.nvim',
+    },
+    config = function()
+        require("codegpt.config")
+        vim.g["codegpt_api_provider"] = "anthropic"
+        vim.g["codegpt_global_commands_defaults"] = {
+            --      model = "gpt-4o",
+            model = "claude-3-5-sonnet-20240620",
+            max_tokens = 4096,
+            temperature = 1.0,
+            -- extra_parms = { -- optional list of extra parameters to send to the API
+            --     presence_penalty = 1,
+            --     frequency_penalty= 1
+            -- }
+        }
+    end
+}
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/lspconfig.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/lspconfig.lua
index 7824a9e..05fdada 100644
--- home-manager/neovim/my-init-lua/init.lua/after/plugin/lspconfig.lua
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/lspconfig.lua
@@ -18,7 +18,8 @@ return {
             local capabilities = require('cmp_nvim_lsp').default_capabilities()
             require('lspconfig').clangd.setup {
                 capabilities = capabilities,
-                cmd = { os.getenv('HOME') .. "/.nix-profile/bin/clangd", "--offset-encoding=utf-16", "-j=4" },
+--                cmd = { os.getenv('HOME') .. "/.nix-profile/bin/clangd", "--offset-encoding=utf-16", "-j=4", "--background-index", "--compile-commands-dir=./build/linux-gnu.release/cmake/" },
+                cmd = { os.getenv('HOME') .. "/.nix-profile/bin/clangd", "--offset-encoding=utf-16", "-j=4", "--background-index" }
             }
             require('lspconfig').pyright.setup {
                 capabilities = capabilities
@@ -29,6 +30,9 @@ return {
             require('lspconfig').nil_ls.setup {
                 capabilities = capabilities
             }
+            require('lspconfig').rust_analyzer.setup {
+                capabilities = capabilities
+            }
             --require('lspconfig').neocmake.setup {
             --    capabilities = capabilities
             --}
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/refactoring.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/refactoring.lua
new file mode 100644
index 0000000..6487d8a
--- /dev/null
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/refactoring.lua
@@ -0,0 +1,9 @@
+return {
+    "ThePrimeagen/refactoring.nvim",
+    keys = {
+        { "<leader>ri", function() require("refactoring").refactor("Inline Variable") end,  mode = "n", { noremap = true, silent = true } },
+        { "<leader>re", function() require("refactoring").refactor("Extract Variable") end, mode = "x", { noremap = true, silent = true } },
+        { "<leader>rI", function() require("refactoring").refactor("Inline Function") end,  mode = "n", { noremap = true, silent = true } },
+        { "<leader>rE", function() require("refactoring").refactor("Extract Function") end, mode = "x", { noremap = true, silent = true } },
+    },
+}
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/rustaceanvim.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/rustaceanvim.lua
new file mode 100644
index 0000000..766d52d
--- /dev/null
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/rustaceanvim.lua
@@ -0,0 +1,5 @@
+return {
+  'mrcjkb/rustaceanvim',
+  version = '^4', -- Recommended
+  lazy = false, -- This plugin is already lazy
+}
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/surround.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/surround.lua
index 948f9bd..d308394 100644
--- home-manager/neovim/my-init-lua/init.lua/after/plugin/surround.lua
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/surround.lua
@@ -2,4 +2,5 @@ return {
     "kylechui/nvim-surround",
     version = "*", -- Use for stability; omit to use `main` branch for the latest features
     event = "VeryLazy",
+    opts = {}
 }
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/telescope.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/telescope.lua
index ffab676..5611848 100644
--- home-manager/neovim/my-init-lua/init.lua/after/plugin/telescope.lua
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/telescope.lua
@@ -1,77 +1,86 @@
 local function telescope_buffer_dir()
-    return vim.fn.expand('%:p:h')
+  return vim.fn.expand('%:p:h')
 end
 return {
-    "nvim-telescope/telescope.nvim",
-    dependencies = {
-        "nvim-lua/plenary.nvim",
-        "scanhex/telescope-file-browser.nvim",
-    },
-    config = function()
-        local telescope = require('telescope')
-        local actions = require('telescope.actions')
-        local builtin = require('telescope.builtin')
+  "nvim-telescope/telescope.nvim",
+  dependencies = {
+    "nvim-lua/plenary.nvim",
+    "scanhex/telescope-file-browser.nvim",
+  },
+  config = function()
+    local telescope = require('telescope')
+    local actions = require('telescope.actions')
+    local builtin = require('telescope.builtin')
 
 
-        local fb_actions = require "telescope".extensions.file_browser.actions
+    local fb_actions = require "telescope".extensions.file_browser.actions
 
-        telescope.setup({
-            extensions = {
-                rooter = {
-                    enable = false,
-                    patterns = { ".git" },
-                    debug = false
-                },
-                file_browser = {
-                    theme = "dropdown",
-                    hijack_netrw = true,
-                    mappings = {
-                        ["i"] = {
-                            ["<C-w>"] = function() vim.cmd('normal vbd') end,
-                        },
-                        ["n"] = {
-                            ["N"] = fb_actions.create,
-                            ["h"] = fb_actions.goto_parent_dir,
-                            ["s"] = fb_actions.sort_by_date,
-                            ["/"] = function()
-                                vim.cmd('startinsert')
-                            end
-                        },
-                    },
-                },
+    telescope.setup({
+      extensions = {
+        rooter = {
+          enable = false,
+          patterns = { ".git" },
+          debug = false
+        },
+        file_browser = {
+          theme = "dropdown",
+          hijack_netrw = true,
+          mappings = {
+            ["i"] = {
+              ["<C-w>"] = function() vim.cmd('normal vbd') end,
             },
-            defaults = {
-                layout_config = {
-                    vertical = { width = 0.95 },
-                    horizontal = { width = 0.95 },
-                },
-                path_display = { "truncate" },
-                mappings = {
-                    n = { ["q"] = actions.close },
-                },
+            ["n"] = {
+              ["N"] = fb_actions.create,
+              ["h"] = fb_actions.goto_parent_dir,
+              ["s"] = fb_actions.sort_by_date,
+              ["/"] = function()
+                vim.cmd('startinsert')
+              end
             },
-        })
+          },
+        },
+      },
+      defaults = {
+        layout_config = {
+          vertical = { width = 0.95 },
+          horizontal = { width = 0.95 },
+        },
+        path_display = { "truncate" },
+        mappings = {
+          n = { ["q"] = actions.close },
+        },
+      },
+    })
 
-        telescope.load_extension("file_browser")
-        --telescope.load_extension('rooter')
-        --telescope.load_extension('cmake4vim')
-    end,
-    keys = {
-        { '<leader>pf', function() require("telescope.builtin").find_files() end,                                                                                                                                                                                                          {} },
-        { '<C-p>',      function() require("telescope.builtin").git_files() end,                                                                                                                                                                                                           {} },
-        { '<leader>ps', function() require("telescope.builtin").grep_string({ search = vim.fn.input("Grep > ") }) end,                                                                                                                                                                     {} },
-        { '<leader>pS', function() require("telescope.builtin").live_grep() end,                                                                                                                                                                                                           {} },
-        { '<leader>vh', function() require("telescope.builtin").help_tags() end,                                                                                                                                                                                                           {} },
-        { ';f',         function() require("telescope.builtin").find_files({ no_ignore = false, hidden = true }) end,                                                                                                                                                                      {} },
-        { ';r',         function() require("telescope.builtin").live_grep() end,                                                                                                                                                                                                           {} },
-        { '\\\\',       function() require("telescope.builtin").buffers() end,                                                                                                                                                                                                             {} },
-        { ';t',         function() require("telescope.builtin").help_tags() end,                                                                                                                                                                                                           {} },
-        { ';;',         function() require("telescope.builtin").resume() end,                                                                                                                                                                                                              {} },
-        { ';e',         function() require("telescope.builtin").diagnostics() end,                                                                                                                                                                                                         {} },
-        { ';g',         function() require("telescope.builtin").git_branches() end,                                                                                                                                                                                                        {} },
-        { ';c',         function() require("telescope.builtin").commands() end,                                                                                                                                                                                                            {} },
-        { "sf",         function() require("telescope").extensions.file_browser.file_browser({ path = "%:p:h", cwd =
-            telescope_buffer_dir(), respect_gitignore = false, hidden = true, grouped = false, previewer = false, initial_mode =
-            "normal", layout_config = { height = 40 } }) end,                                                                                                                                                                                                                              {} },
-    },
+    telescope.load_extension("file_browser")
+    --telescope.load_extension('rooter')
+    --telescope.load_extension('cmake4vim')
+  end,
+  keys = {
+    { '<leader>pf', function() require("telescope.builtin").find_files() end,                                      {} },
+    { '<C-p>',      function() require("telescope.builtin").git_files() end,                                       {} },
+    { '<leader>ps', function() require("telescope.builtin").grep_string({ search = vim.fn.input("Grep > ") }) end, {} },
+    { '<leader>pS', function() require("telescope.builtin").live_grep() end,                                       {} },
+    { '<leader>vh', function() require("telescope.builtin").help_tags() end,                                       {} },
+    { ';f',         function() require("telescope.builtin").find_files({ no_ignore = false, hidden = true }) end,  {} },
+    { ';r',         function() require("telescope.builtin").live_grep() end,                                       {} },
+    { '\\\\',       function() require("telescope.builtin").buffers() end,                                         {} },
+    { ';t',         function() require("telescope.builtin").help_tags() end,                                       {} },
+    { ';;',         function() require("telescope.builtin").resume() end,                                          {} },
+    { ';e',         function() require("telescope.builtin").diagnostics() end,                                     {} },
+    { ';g',         function() require("telescope.builtin").git_branches() end,                                    {} },
+    { ';c',         function() require("telescope.builtin").commands() end,                                        {} },
+    { "sf", function()
+      require("telescope").extensions.file_browser.file_browser({
+        path = "%:p:h",
+        cwd = telescope_buffer_dir(),
+        respect_gitignore = false,
+        hidden = true,
+        grouped = false,
+        previewer = false,
+        initial_mode = "normal",
+        layout_config = { height = 40 }
+      })
+    end, {} },
+  },
 }
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/treesitter.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/treesitter.lua
index fe1dcaf..a0b7968 100644
--- home-manager/neovim/my-init-lua/init.lua/after/plugin/treesitter.lua
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/treesitter.lua
@@ -1,6 +1,7 @@
 return {
     {
         "nvim-treesitter/nvim-treesitter",
+        dependencies = { "nvim-treesitter/nvim-treesitter-context" },
         opts = {
             -- A list of parser names, or "all"
             -- ensure_installed = { "vimdoc", "javascript", "typescript", "c", "cpp", "lua", "rust"},
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/trouble.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/trouble.lua
new file mode 100644
index 0000000..5f7e12e
--- /dev/null
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/trouble.lua
@@ -0,0 +1,8 @@
+return {
+    "folke/trouble.nvim",
+    opts = {},
+    cmd = "Trouble",
+    keys = {
+        {"<leader>xq", "<cmd>Trouble quickfix<cr>"},
+    }
+}
diff --git home-manager/neovim/my-init-lua/init.lua/after/plugin/zenmode.lua home-manager/neovim/my-init-lua/init.lua/after/plugin/zenmode.lua
new file mode 100644
index 0000000..abe9da7
--- /dev/null
+++ home-manager/neovim/my-init-lua/init.lua/after/plugin/zenmode.lua
@@ -0,0 +1,34 @@
+return {
+    "folke/zen-mode.nvim",
+    opts = {
+    },
+    keys = {
+        { "<leader>zz", function()
+            require("zen-mode").setup {
+                window = {
+                    width = 90,
+                    options = {}
+                },
+            }
+            require("zen-mode").toggle()
+            vim.wo.wrap = false
+            vim.wo.number = true
+            vim.wo.rnu = true
+        end
+        },
+        { "<leader>zZ", function()
+            require("zen-mode").setup {
+                window = {
+                    width = 80,
+                    options = {}
+                },
+            }
+            require("zen-mode").toggle()
+            vim.wo.wrap = false
+            vim.wo.number = false
+            vim.wo.rnu = false
+            vim.opt.colorcolumn = "0"
+        end
+        }
+    }
+}
diff --git home-manager/shells/bashrc-base.nix home-manager/shells/bashrc-base.nix
index dd0d70a..1fb597e 100644
--- home-manager/shells/bashrc-base.nix
+++ home-manager/shells/bashrc-base.nix
@@ -14,5 +14,10 @@ HISTSIZE=10000000
 HISTFILESIZE=10000000
 PROMPT_COMMAND='history -a'
 export CMAKE_EXPORT_COMPILE_COMMANDS=1
+
+for completion_script in ${config.home.profileDirectory}/share/bash-completion/completions/*
+do
+  source "$completion_script"
+done
     '';
 }
diff --git home-manager/shells/default.nix home-manager/shells/default.nix
index b6b375e..396946e 100644
--- home-manager/shells/default.nix
+++ home-manager/shells/default.nix
@@ -13,8 +13,11 @@
         };
     };
     config = {
-        programs.bash.bashrcExtra = config.my.bash.bashrcPrefix + (import ./bashrc-base.nix {config = config;}).bashrcBase + config.my.bash.bashrcSuffix;
-        programs.bash.enable = true; # otherwise bashrcExtra/shellAliases wouldn't work 
+        programs.bash = {
+            enable = true; # otherwise bashrcExtra/shellAliases wouldn't work 
+            bashrcExtra = config.my.bash.bashrcPrefix + (import ./bashrc-base.nix {config = config;}).bashrcBase + config.my.bash.bashrcSuffix;
+            enableCompletion = true;
+        };
         #programs.zsh.enable = true;
         home.shellAliases = {
             mm = "micromamba";
